Part 1
find a path with the lowest total risk
You start in the top left position, your destination is the bottom right position, and you cannot move diagonally. The number at each position is its risk level; to determine the total risk of an entire path, add up the risk levels of each position you enter (that is, don't count the risk level of your starting position unless you enter it; leaving it adds no risk to your total).

Part 2
The entire cave is actually five times larger in both dimensions than you thought; the area you originally scanned is just one tile in a 5x5 tile area that forms the full map
the area you originally scanned is just one tile in a 5x5 tile area that forms the full map
Your original map tile repeats to the right and downward
    - each time the tile repeats to the right or downward, all of its risk levels are 1 higher than the tile immediately up or left of it
    - risk levels above 9 wrap back around to 1

 1   2   3   4   5
 6   7   8   9  10
11  12  13  14  15
16  17  18  19  20
21  22  23  24  25

A: +0  1 -> 2==6
B: +1  2,6 -> 3==7==11
C: +2  3,7,11 -> 4==8==12==16
D: +3  4,8,12,16 -> 5==9==13==17==21
E: +4  5,9,13,17,21 -> 10==14==18==22
F: +5  10,14,18,22 -> 15==19==23
G: +6  15,19,23 -> 20==24
H: +7  20,24 -> 25
I: +8  25


# function Dijkstra(Graph, source):
#     for each vertex v in Graph.Vertices:
#         dist[v] ← INFINITY
#         prev[v] ← UNDEFINED
#         add v to Q
#     dist[source] ← 0
#     while Q is not empty:
#         u ← vertex in Q with min dist[u]
#         remove u from Q
#         for each neighbour v of u still in Q:
#             alt ← dist[u] + Graph.Edges(u, v)
#             if alt < dist[v]:
#                 dist[v] ← alt
#                 prev[v] ← u
#     return dist[], prev[]

# S ← empty sequence
# u ← target
# if prev[u] is defined or u = source:          // Do something only if the vertex is reachable
#     while u is defined:                       // Construct the shortest path with a stack S
#         insert u at the beginning of S        // Push the vertex onto the stack
#         u ← prev[u]                           // Traverse from target to source
